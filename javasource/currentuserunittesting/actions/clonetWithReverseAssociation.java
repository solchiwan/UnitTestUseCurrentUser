// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package currentuserunittesting.actions;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.core.objectmanagement.member.MendixAutoNumber;
import com.mendix.core.objectmanagement.member.MendixObjectReference;
import com.mendix.core.objectmanagement.member.MendixObjectReferenceSet;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import com.mendix.systemwideinterfaces.core.meta.IMetaAssociation;
import com.mendix.systemwideinterfaces.core.meta.IMetaAssociation.AssociationType;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.webui.CustomJavaAction;

public class clonetWithReverseAssociation extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject source;
	private IMendixObject target;
	private java.lang.String reverseAssociation;

	public clonetWithReverseAssociation(IContext context, IMendixObject source, IMendixObject target, java.lang.String reverseAssociation)
	{
		super(context);
		this.source = source;
		this.target = target;
		this.reverseAssociation = reverseAssociation;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		cloneObject();
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "clonetWithReverseAssociation";
	}

	// BEGIN EXTRA CODE
	public void cloneObject() throws CoreException
	{
		IContext context = getContext();
		Map<String, ? extends IMendixObjectMember<?>> members = source.getMembers(context);
		List<String> reserveAssociations = Arrays.asList(reverseAssociation.split(","));
		
		for(String key : members.keySet()) { 
			IMendixObjectMember<?> objectMember = members.get(key);
			if (objectMember.isVirtual())	continue;
			if (objectMember instanceof MendixAutoNumber) continue;
			if ((!(objectMember instanceof MendixObjectReference) && !(objectMember instanceof MendixObjectReferenceSet)&& !(objectMember instanceof MendixAutoNumber))) {
				target.setValue(context, key, objectMember.getValue(context));
			}
		}
		
		Map<IMendixIdentifier, IMendixIdentifier> mappedObjects = new HashMap<IMendixIdentifier, IMendixIdentifier>();
		mappedObjects.put(source.getId(), target.getId());
		duplicateReverseAssociations(context, source, reserveAssociations, mappedObjects);
	}
	
	private void duplicateReverseAssociations(IContext context, IMendixObject sourceObject, List<String> reserveAssociations,
	        Map<IMendixIdentifier, IMendixIdentifier> mappedObjects) throws CoreException
	{
		for(String fullAssociationName : reserveAssociations) {
			String[] parts = fullAssociationName.split("/"); 
			
			if (parts.length != 1 && parts.length != 3) //specifying entity has no meaning anymore, but remain backward compatible. 
				throw new IllegalArgumentException("Reverse association is not defined correctly, please mention the relation name only: '" + fullAssociationName + "'");
			String assocname = parts.length == 3 ? parts[1] : parts[0]; //support length 3 for backward compatibility
			IMetaAssociation metaAssociation = sourceObject.getMetaObject().getDeclaredMetaAssociationChild(assocname);
	
			if (metaAssociation != null) {
				IMetaObject relationParent = metaAssociation.getParent();
				if (metaAssociation.getType() == AssociationType.REFERENCESET) {
					throw new IllegalArgumentException("It is not possible to clone reverse referencesets: '" + fullAssociationName + "'");
				}
				
				List<IMendixObject> objects = Core.retrieveXPathQuery(context, String.format("//%s[%s='%s']", 
				        relationParent.getName(), assocname, String.valueOf(sourceObject.getId().toLong())));
				
				for(IMendixObject objParts : objects) {
				    @SuppressWarnings("unused")
                    IMendixIdentifier refObj = getCloneOfObject(context, objParts, reserveAssociations, mappedObjects);
				}
			}
		}
	}
	
	private IMendixIdentifier getCloneOfObject(IContext context, IMendixObject sourceObject, List<String> reserveAssociations,
            Map<IMendixIdentifier, IMendixIdentifier> mappedObjects) throws CoreException
	{
	    if (mappedObjects.containsKey(sourceObject.getId())) {
            return mappedObjects.get(sourceObject.getId());
        } else { 
            IMendixObject clone = Core.instantiate(context, sourceObject.getType());
            duplicate(context, sourceObject, clone, reserveAssociations, mappedObjects);
            return clone.getId();               
        }
	}
	
	private void duplicate(IContext context, IMendixObject sourceObject, IMendixObject targetObject, List<String> reserveAssociations,
			Map<IMendixIdentifier, IMendixIdentifier> mappedObjects) throws CoreException
	{
		mappedObjects.put(sourceObject.getId(), targetObject.getId());
		
	    Map<String, ? extends IMendixObjectMember<?>> members = sourceObject.getMembers(context);

		for(String key : members.keySet()) {
			IMendixObjectMember<?> objectMember = members.get(key);
			if (objectMember.isVirtual() || objectMember instanceof MendixAutoNumber) continue;
			if (objectMember instanceof MendixObjectReference && objectMember.getValue(context) != null) {
				IMendixObject obj = Core.retrieveId(context, ((MendixObjectReference) objectMember).getValue(context));
				IMendixIdentifier refObj = getCloneOfObject(context, obj, reserveAssociations, mappedObjects);
				targetObject.setValue(context, key, refObj);                 
			} else if (objectMember instanceof MendixObjectReferenceSet && objectMember.getValue(context) != null) {
				MendixObjectReferenceSet referenceSet = (MendixObjectReferenceSet) objectMember;
				List<IMendixIdentifier> identifierList = new ArrayList<IMendixIdentifier>();
				for(IMendixIdentifier item : referenceSet.getValue(context)) {
					IMendixObject o = Core.retrieveId(context, item);
                    IMendixIdentifier refObj = getCloneOfObject(context, o, reserveAssociations, mappedObjects);
                    identifierList.add(refObj);
				}
				targetObject.setValue(context, key, identifierList);
			} else if (objectMember instanceof MendixAutoNumber) {
				continue;
			} else {
				targetObject.setValue(context, key, objectMember.getValue(context));
			}
			Core.commitWithoutEvents(context, targetObject);
		}
		duplicateReverseAssociations(context, sourceObject, reserveAssociations, mappedObjects);
	}
	// END EXTRA CODE
}
